{"version":3,"file":"main.3d651905f068b9cf99bd.js","mappings":"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","sources":["webpack:///./app/geometry/point-spherical.ts","webpack:///./app/geometry/point-3d.ts","webpack:///./app/geometry/vector-3d.ts","webpack:///./app/geometry/triangle-3d.ts","webpack:///./app/errors/matrix-error.ts","webpack:///./app/errors/matrix-operation-error.ts","webpack:///./app/utils/array/are-elements-equal.ts","webpack:///./app/matrix/matrix.ts","webpack:///./app/renderer/rotator.ts","webpack:///./app/scene/mesh.ts","webpack:///./app/errors/equation-error.ts","webpack:///./app/matrix/square-matrix.ts","webpack:///./app/equations/system-of-linear-equations.ts","webpack:///./app/equations/system-of-linear-equations-3eq-3var.ts","webpack:///./app/utils/get-length.ts","webpack:///./app/scene/mesh-intersection-detector.ts","webpack:///./app/scene/objects/scene-object.ts","webpack:///./app/scene/objects/mesh-scene-object.ts","webpack:///./app/scene/objects/parallelepiped.ts","webpack:///./app/scene/objects/cube.ts","webpack:///./app/scene/objects/plane.ts","webpack:///./app/utils/array/gen-array.ts","webpack:///./app/scene/objects/prism.ts","webpack:///./app/scene/objects/sphere.ts","webpack:///./app/utils/solve-quadratic-equation.ts","webpack:///./app/utils/get-equations.ts","webpack:///./app/utils/generate-ray.ts","webpack:///./app/scene/camera.ts","webpack:///./app/constants/scene-presets/default-scene.ts","webpack:///./app/scene/scene.ts","webpack:///./app/constants/default-camera.ts","webpack:///./app/errors/renderer-error.ts","webpack:///./app/utils/get-element.ts","webpack:///./app/renderer/screen.ts","webpack:///./app/utils/mix-colors.ts","webpack:///./app/renderer/renderer-processing-info.ts","webpack:///./app/renderer/renderer.ts","webpack:///./app/utils/array/remove-element-from.ts","webpack:///./app/debug/counters.ts","webpack:///./app/renderer/axes-renderer.ts","webpack:///./app/index.ts","webpack:///./app/renderer/ui.ts"],"sourcesContent":["import { Point3d } from './point-3d';\r\n\r\nexport class PointSpherical {\r\n\r\n  /**\r\n   * @param distance distance from origin to point\r\n   * @param angleVertical latitude. from -90 to 90\r\n   * @param angleHorizontal azimuthal angle\r\n   */\r\n  constructor(public readonly distance: number,\r\n              public readonly angleVertical: number,\r\n              public readonly angleHorizontal: number) {}\r\n\r\n  public toCartesian(origin?: Point3d): Point3d {\r\n    const angleVerticalRad = (this.angleVertical + 90) * Math.PI / 180;\r\n    const angleHorizontalRad = this.angleHorizontal * Math.PI / 180;\r\n\r\n    const x = this.distance * Math.sin(angleVerticalRad) * Math.cos(angleHorizontalRad);\r\n    const y = this.distance * Math.sin(angleVerticalRad) * Math.sin(angleHorizontalRad);\r\n    const z = this.distance * Math.cos(angleVerticalRad);\r\n\r\n    const point = new Point3d(x, y, z);\r\n    return origin ? point.add(origin) : point;\r\n  }\r\n}\r\n","import { PointSpherical } from './point-spherical';\r\n\r\nexport class Point3d {\r\n\r\n  constructor(public readonly x: number,\r\n              public readonly y: number,\r\n              public readonly z: number) {}\r\n\r\n  public add(point: Point3d): Point3d {\r\n    return new Point3d(this.x + point.x, this.y + point.y, this.z + point.z);\r\n  }\r\n\r\n  public subtract(point: Point3d): Point3d {\r\n    return new Point3d(this.x - point.x, this.y - point.y, this.z - point.z);\r\n  }\r\n\r\n  public toSpherical(origin?: Point3d): PointSpherical {\r\n    const { x, y, z } = origin ? this.subtract(origin) : this;\r\n    const r = Math.sqrt(x * x + y * y + z * z);\r\n\r\n    return new PointSpherical(\r\n      r,\r\n      Math.acos(z / r) * 180 / Math.PI - 90,\r\n      Math.atan(y / x) * 180 / Math.PI\r\n    );\r\n  }\r\n}\r\n","import { Point3d } from './point-3d';\r\n\r\nexport class Vector {\r\n\r\n  constructor(public readonly point: Point3d) {}\r\n\r\n  /**\r\n   * @param vector other vector\r\n   * @returns angle between two vectors in degrees\r\n   */\r\n  public getAngle(vector: Vector): number {\r\n    if (this === vector) {\r\n      return 0;\r\n    }\r\n\r\n    const x1 = this.point.x;\r\n    const y1 = this.point.y;\r\n    const z1 = this.point.z;\r\n    const x2 = vector.point.x;\r\n    const y2 = vector.point.y;\r\n    const z2 = vector.point.z;\r\n\r\n    const expr = (x1 * x2 + y1 * y2 + z1 * z2) /\r\n                 (Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1) * Math.sqrt(x2 * x2 + y2 * y2 + z2 * z2));\r\n\r\n    return Math.acos(expr) * 180 / Math.PI;\r\n  }\r\n}\r\n","import { LinearEquation } from '../models/linear-equation.model';\r\nimport { Point3d } from './point-3d';\r\nimport { Vector } from './vector-3d';\r\n\r\nexport class Triangle3d {\r\n\r\n  constructor(public readonly point1: Point3d,\r\n              public readonly point2: Point3d,\r\n              public readonly point3: Point3d) { }\r\n\r\n  /* Generic matrix\r\n    | x - x0   x1 - x0   x2 - x0 |\r\n    | y - y0   y1 - y0   y2 - y0 |\r\n    | z - z0   z1 - z0   z2 - z0 |\r\n  */\r\n  public getPlaneEquation(): LinearEquation {\r\n    const x0 = this.point1.x;\r\n    const y0 = this.point1.y;\r\n    const z0 = this.point1.z;\r\n    const x1 = this.point2.x;\r\n    const y1 = this.point2.y;\r\n    const z1 = this.point2.z;\r\n    const x2 = this.point3.x;\r\n    const y2 = this.point3.y;\r\n    const z2 = this.point3.z;\r\n\r\n    const dx1 = x1 - x0;\r\n    const dx2 = x2 - x0;\r\n    const dy1 = y1 - y0;\r\n    const dy2 = y2 - y0;\r\n    const dz1 = z1 - z0;\r\n    const dz2 = z2 - z0;\r\n\r\n    const coefX = dy1 * dz2 - dy2 * dz1;\r\n    const coefY = dx2 * dz1 - dx1 * dz2;\r\n    const coefZ = dx1 * dy2 - dx2 * dy1;\r\n    const constant = x0 * (dy2 * dz1 - dy1 * dz2) +\r\n                     y0 * (dx1 * dz2 - dx2 * dz1) +\r\n                     z0 * (dx2 * dy1 - dx1 * dy2);\r\n\r\n    return {\r\n      coefficients: [coefX, coefY, coefZ],\r\n      constant\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Is guaranteed, that the point is on triangle plane\r\n   */\r\n  public pointInside(point: Point3d): boolean {\r\n    const vector1 = new Vector(this.point1.subtract(point));\r\n    const vector2 = new Vector(this.point2.subtract(point));\r\n    const vector3 = new Vector(this.point3.subtract(point));\r\n\r\n    const angle = vector1.getAngle(vector2) + vector2.getAngle(vector3) + vector3.getAngle(vector1);\r\n    return angle >= 359.999999;\r\n  }\r\n}\r\n","export class MatrixError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'MatrixError';\r\n  }\r\n}\r\n","import { MatrixError } from './matrix-error';\r\n\r\nexport class MatrixOperationError extends MatrixError {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'MatrixOperationError';\r\n  }\r\n}\r\n","export function areElementsEqual<T>(list: T[]): boolean {\r\n  if (list.length === 0) {\r\n    return true;\r\n  }\r\n\r\n  for (const element of list) {\r\n    if (element !== list[0]) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n","import { MatrixError } from '../errors/matrix-error';\r\nimport { MatrixOperationError } from '../errors/matrix-operation-error';\r\nimport { areElementsEqual } from '../utils/array/are-elements-equal';\r\n\r\nexport class Matrix {\r\n  public columns: number;\r\n  public rows: number;\r\n  public readonly values: number[][];\r\n\r\n  constructor(values: number[][]) {\r\n    if (!values) {\r\n      throw new MatrixError('Matrix is empty');\r\n    }\r\n    this.values = values;\r\n\r\n    const size = this.calculateSize();\r\n    this.columns = size.columns;\r\n    this.rows = size.rows;\r\n  }\r\n\r\n  public add(matrix: Matrix): Matrix {\r\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\r\n      throw new MatrixOperationError(\r\n        `Matrix sizes are different. ${this.rows}x${this.columns}, ${matrix.rows}x${matrix.columns}`\r\n      );\r\n    }\r\n\r\n    return new Matrix(\r\n      this.values.map((row, rowIndex) => row.map((val, columnIndex) => val + matrix.values[rowIndex][columnIndex]))\r\n    );\r\n  }\r\n\r\n  public multiply(multiplier: number | Matrix): Matrix {\r\n    if (multiplier instanceof Matrix) {\r\n      return this.multiplyByMatrix(<Matrix>multiplier);\r\n    }\r\n\r\n    return this.multiplyByNumber(<number>multiplier);\r\n  }\r\n\r\n  public subtract(matrix: Matrix): Matrix {\r\n    if (this.rows !== matrix.rows || this.columns !== matrix.columns) {\r\n      throw new MatrixOperationError(\r\n        `Matrix sizes are different. ${this.rows}x${this.columns}, ${matrix.rows}x${matrix.columns}`\r\n      );\r\n    }\r\n\r\n    return new Matrix(\r\n      this.values.map((row, rowIndex) => row.map((val, columnIndex) => val - matrix.values[rowIndex][columnIndex]))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when matrix doesn't satisfy specific size\r\n   * @param rows\r\n   * @param columns\r\n   */\r\n  protected throwSizeError(rows: number, columns: number): void {\r\n    throw new MatrixError(`Matrix must be ${rows} rows and ${columns} columns. Now is ${this.rows}x${this.columns}`);\r\n  }\r\n\r\n  private calculateSize(): { rows: number, columns: number } {\r\n    let rows = 0;\r\n    let columns = 0;\r\n\r\n    rows = this.values.length;\r\n    if (rows === 0) {\r\n      throw new MatrixError('There are no rows in matrix');\r\n    }\r\n\r\n    const lengthsOfRows = this.values.map(row => row.length);\r\n\r\n    if (!areElementsEqual(lengthsOfRows)) {\r\n      throw new MatrixError(`Lengths of rows are different: ${lengthsOfRows}`);\r\n    }\r\n\r\n    if (this.values[0].length === 0) {\r\n      throw new MatrixError('There are no columns in matrix');\r\n    }\r\n    columns = this.values[0].length;\r\n\r\n    return { rows, columns };\r\n  }\r\n\r\n  private multiplyByNumber(multiplier: number): Matrix {\r\n    return new Matrix(this.values.map(row => row.map(val => val * multiplier)));\r\n  }\r\n\r\n  private multiplyByMatrix(matrix: Matrix): Matrix {\r\n    const newValues: number[][] = [];\r\n\r\n    for (let rowIndex = 0; rowIndex < this.rows; rowIndex++) {\r\n      const row = [];\r\n      for (let colIndex = 0; colIndex < matrix.columns; colIndex++) {\r\n        let sum = 0;\r\n        for (let columnCalcIndex = 0; columnCalcIndex < this.columns; columnCalcIndex++) {\r\n          sum += this.values[rowIndex][columnCalcIndex] * matrix.values[columnCalcIndex][colIndex];\r\n        }\r\n        row.push(sum);\r\n      }\r\n      newValues.push(row);\r\n    }\r\n\r\n    return new Matrix(newValues);\r\n  }\r\n}\r\n","import { Point3d } from '../geometry/point-3d';\r\nimport { Matrix } from '../matrix/matrix';\r\nimport { Rotation } from '../models/rotation.model';\r\n\r\nexport class Rotator {\r\n  constructor(\r\n    public readonly rotation: Rotation,\r\n    public readonly pivot?: Point3d,\r\n  ) {\r\n    if (!pivot) {\r\n      this.pivot = new Point3d(0, 0, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return point rotated by specific angles\r\n   */\r\n  public rotatePoint(point: Point3d): Point3d {\r\n    const xRad = this.rotation.x * Math.PI / 180;\r\n    const yRad = this.rotation.y * Math.PI / 180;\r\n    const zRad = this.rotation.z * Math.PI / 180;\r\n    const point0 = point.subtract(this.pivot ?? new Point3d(0, 0, 0));\r\n\r\n    const rotationMatrixX = new Matrix([\r\n      [1, 0, 0],\r\n      [0, Math.cos(xRad), -Math.sin(xRad)],\r\n      [0, Math.sin(xRad), Math.cos(xRad)]\r\n    ]);\r\n\r\n    const rotationMatrixY = new Matrix([\r\n      [Math.cos(yRad), 0, Math.sin(yRad)],\r\n      [0, 1, 0],\r\n      [-Math.sin(yRad), 0, Math.cos(yRad)]\r\n    ]);\r\n\r\n    const rotationMatrixZ = new Matrix([\r\n      [Math.cos(zRad), -Math.sin(zRad), 0],\r\n      [Math.sin(zRad), Math.cos(zRad), 0],\r\n      [0, 0, 1]\r\n    ]);\r\n\r\n    const coordsRotatedX = rotationMatrixX.multiply(new Matrix([[point0.x], [point0.y], [point0.z]]));\r\n    const coordsRotatedXY = rotationMatrixY.multiply(coordsRotatedX);\r\n    const coordsRotatedXYZ = rotationMatrixZ.multiply(coordsRotatedXY);\r\n    const x1 = coordsRotatedXYZ.values[0][0];\r\n    const y1 = coordsRotatedXYZ.values[1][0];\r\n    const z1 = coordsRotatedXYZ.values[2][0];\r\n\r\n    return new Point3d(x1, y1, z1).add(this.pivot ?? new Point3d(0, 0, 0));\r\n  }\r\n\r\n  /**\r\n   * Return points rotated by specific angles\r\n   */\r\n  public rotatePoints(points: Point3d[]): Point3d[] {\r\n    return points.map(point => this.rotatePoint(point));\r\n  }\r\n}\r\n","import { LinearEquation } from '../models/linear-equation.model';\r\nimport { Triangle3d } from '../geometry/triangle-3d';\r\nimport { Material } from '../models/material.model';\r\n\r\nexport class Mesh {\r\n  public readonly equation: LinearEquation;\r\n\r\n  constructor(\r\n    public readonly triangle: Triangle3d,\r\n    public readonly material: Material\r\n  ) {\r\n    this.equation = this.triangle.getPlaneEquation();\r\n  }\r\n}\r\n","export class EquationError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'EquationError';\r\n  }\r\n}\r\n","import { MatrixError } from '../errors/matrix-error';\r\nimport { Matrix } from './matrix';\r\n\r\nexport class SquareMatrix extends Matrix {\r\n\r\n  constructor(values: number[][]) {\r\n    super(values);\r\n\r\n    if (this.rows !== this.columns) {\r\n      throw new MatrixError(`It's not a square matrix (${this.rows}x${this.columns})`);\r\n    }\r\n  }\r\n\r\n  public getDeterminant(multiplier: number = 1): number {\r\n\r\n    if (this.rows === 2 && this.columns === 2) {\r\n      return multiplier * this.values[0][0] * this.values[1][1] - multiplier * this.values[0][1] * this.values[1][0];\r\n    }\r\n\r\n    let determinant = 0;\r\n\r\n    for (let columnIndex = 0; columnIndex < this.columns; columnIndex++) {\r\n\r\n      const matrixValues: number[][] = [];\r\n      for (let rowIndex = 1; rowIndex < this.rows; rowIndex++) {\r\n        const row = this.values[rowIndex].slice();\r\n        row.splice(columnIndex, 1);\r\n        matrixValues.push(row);\r\n      }\r\n\r\n      const newMultiplier = multiplier * this.values[0][columnIndex];\r\n      determinant += (columnIndex % 2 === 0 ? 1 : -1) * new SquareMatrix(matrixValues).getDeterminant(newMultiplier);\r\n    }\r\n\r\n    return determinant;\r\n  }\r\n}\r\n","import { EquationError } from '../errors/equation-error';\r\nimport { SquareMatrix } from '../matrix/square-matrix';\r\nimport { LinearEquation } from '../models/linear-equation.model';\r\nimport { areElementsEqual } from '../utils/array/are-elements-equal';\r\n\r\nexport class SystemOfLinearEquations {\r\n\r\n  public readonly equations: LinearEquation[];\r\n\r\n  // Number of variables = number of equations\r\n  constructor(equations: LinearEquation[]) {\r\n    this.equations = equations;\r\n\r\n    const numbersOfCoefficients = equations.map(eq => eq.coefficients.length);\r\n    if (!areElementsEqual(numbersOfCoefficients)) {\r\n      throw new EquationError(`Different numbers of coefficients: ${numbersOfCoefficients}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns null, if system has no solutions\r\n   */\r\n  public getSolution(): number[] | null {\r\n\r\n    // by Cramer's rule\r\n\r\n    const matrix = new SquareMatrix(this.equations.map(eq => eq.coefficients));\r\n\r\n    const mainDeterminant = matrix.getDeterminant();\r\n    if (mainDeterminant === 0) {\r\n      return null;\r\n    }\r\n    const solution: number[] = [];\r\n\r\n    for (let columnIndex = 0; columnIndex < matrix.columns; columnIndex++) {\r\n      const valuesForMatrix: number[][] = [];\r\n\r\n      for (let i = 0; i < this.equations.length; i++) {\r\n        const rowValues = this.equations[i].coefficients.slice();\r\n        rowValues[columnIndex] = -this.equations[i].constant;\r\n        valuesForMatrix.push(rowValues);\r\n      }\r\n\r\n      solution.push(new SquareMatrix(valuesForMatrix).getDeterminant() / mainDeterminant);\r\n    }\r\n    return solution;\r\n  }\r\n}\r\n","import { EquationError } from '../errors/equation-error';\r\nimport { LinearEquation } from '../models/linear-equation.model';\r\nimport { SystemOfLinearEquations } from './system-of-linear-equations';\r\n\r\n// TODO: generic for Matrix to class\r\nexport class SystemOfLinearEquations3eq3Var extends SystemOfLinearEquations {\r\n\r\n  constructor(equations: LinearEquation[]) {\r\n    super(equations);\r\n\r\n    if (equations.length !== 3) {\r\n      throw new EquationError('The number of equations must be 3. Now - ' + equations.length);\r\n    }\r\n    if (equations[0].coefficients.length !== 3) {\r\n      throw new EquationError('The number of variables must be 3. Now - ' + equations.length);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns null, if system has no solutions\r\n   */\r\n  public getSolution(): number[] {\r\n    return this.getSolutionByGauss();\r\n  }\r\n\r\n  /**\r\n   * Solves the system of equations by Gaussian elimination.\r\n   *\r\n   * Equations of system is:\r\n   *    ax + by + cz + d = 0\r\n   *    ex + fy + iz + j = 0\r\n   *    kx + my + pz + q = 0\r\n   *\r\n   * Then extended matrix of equation system is\r\n   *    | a b c -d |\r\n   *    | e f i -j |\r\n   *    | k m p -q |\r\n   *\r\n   * Then compute values of variables in common case.\r\n   * @returns coordinates x, y and z\r\n   */\r\n  private getSolutionByGauss(): number[] {\r\n\r\n    /** values (coefficients) */\r\n    const v = this.equations.map(eq => [...eq.coefficients, eq.constant]);\r\n    const a = v[0][0];\r\n    const b = v[0][1];\r\n    const c = v[0][2];\r\n    const d = v[0][3];\r\n    const e = v[1][0];\r\n    const f = v[1][1];\r\n    const i = v[1][2];\r\n    const j = v[1][3];\r\n    const k = v[2][0];\r\n    const m = v[2][1];\r\n    const p = v[2][2];\r\n    const q = v[2][3];\r\n\r\n    const ea = e / a;\r\n    const ka = k / a;\r\n    const fbea = f - b * ea;\r\n\r\n    const z = (d * ka - q - ((m - b * ka) * ((d * ea - j) / fbea))) /\r\n      (p - (c * ka) - ((m - b * ka) * ((i - c * ea) / fbea)));\r\n\r\n    const y = (d * ea - j) / fbea - z * (i - c * ea) / fbea;\r\n\r\n    const x = -d / a - y * b / a - z * c / a;\r\n\r\n    return [x, y, z];\r\n  }\r\n}\r\n","import { Point3d } from '../geometry/point-3d';\r\n\r\nexport function getLength(point1: Point3d, point2: Point3d): number {\r\n  return Math.sqrt(\r\n    (point1.x - point2.x) * (point1.x - point2.x) +\r\n    (point1.y - point2.y) * (point1.y - point2.y) +\r\n    (point1.z - point2.z) * (point1.z - point2.z));\r\n}\r\n","import { SystemOfLinearEquations3eq3Var } from '../equations/system-of-linear-equations-3eq-3var';\r\nimport { Point3d } from '../geometry/point-3d';\r\nimport { Intersection } from '../models/intersection.model';\r\nimport { getLength } from '../utils/get-length';\r\nimport { Ray } from '../models/ray.model';\r\nimport { Mesh } from './mesh';\r\nimport { SceneObject } from './objects/scene-object';\r\n\r\nexport class MeshIntersectionDetector {\r\n  public static getIntersections(ray: Ray, meshes: Mesh[], object: SceneObject): Intersection[] {\r\n\r\n    const intersections: Intersection[] = [];\r\n\r\n    meshes.forEach(mesh => {\r\n      const equationSystem = new SystemOfLinearEquations3eq3Var([\r\n        ...ray.equations, mesh.equation,\r\n      ]);\r\n\r\n      const point = MeshIntersectionDetector.getIntersectionPoint(equationSystem);\r\n      if (!point || !mesh.triangle.pointInside(point)) {\r\n        return;\r\n      }\r\n\r\n      const inInterval = (\r\n        point.x >= ray.line.point1.x && point.x <= ray.line.point2.x ||\r\n        point.x >= ray.line.point2.x && point.x <= ray.line.point1.x\r\n      );\r\n\r\n      if (inInterval) {\r\n        intersections.push({\r\n          material: mesh.material,\r\n          point,\r\n          distance: getLength(ray.line.point1, point),\r\n          object,\r\n        });\r\n      }\r\n    });\r\n\r\n    return intersections;\r\n  }\r\n\r\n  private static getIntersectionPoint(equationSystem: SystemOfLinearEquations3eq3Var): Point3d | null {\r\n    const solution = equationSystem.getSolution();\r\n    return solution ? new Point3d(solution[0], solution[1], solution[2]) : null;\r\n  }\r\n}\r\n","import { Point3d } from '../../geometry/point-3d';\r\nimport { Intersection } from '../../models/intersection.model';\r\nimport { Ray } from '../../models/ray.model';\r\nimport { Material } from '../../models/material.model';\r\nimport { SceneObjectProperties } from '../object-properties/scene-object-properties';\r\nimport { Rotation } from '../../models/rotation.model';\r\n\r\nexport abstract class SceneObject {\r\n  private static constructorCounters: Partial<Record<string, number>> = {};\r\n\r\n  private static readonly defaultMaterial: Material = {\r\n    color: [255, 255, 255],\r\n  };\r\n\r\n  public readonly name: string;\r\n  public readonly type: string;\r\n  public readonly position: Point3d;\r\n  public readonly rotation: Rotation;\r\n  public readonly material: Material;\r\n\r\n  constructor(properties: SceneObjectProperties) {\r\n    this.name = properties.name ?? SceneObject.getDefaultName(this.constructor.name);\r\n    this.type = this.constructor.name;\r\n    this.position = properties.position;\r\n    this.rotation = properties.rotation ?? { x: 0, y: 0, z: 0 };\r\n    this.material = properties.material ?? SceneObject.defaultMaterial;\r\n\r\n    this.validateOpacity();\r\n    this.validateColor();\r\n  }\r\n\r\n  public abstract getIntersections(ray: Ray): Intersection[];\r\n\r\n  private static getDefaultName(name: string) {\r\n    const id = SceneObject.constructorCounters[name] ?? 0;\r\n    SceneObject.constructorCounters[name] = id + 1;\r\n    return `${name} ${id}`;\r\n  }\r\n\r\n  private validateOpacity(): void {\r\n    const opacity = this.material.opacity;\r\n    if (typeof opacity !== 'undefined' && (opacity < 0 || opacity > 1)) {\r\n      throw new Error(`opacity is not in interval [0, 1]. Current value - ${opacity}`);\r\n    }\r\n  }\r\n\r\n  private validateColor(): void {\r\n    const color = this.material.color;\r\n    if (\r\n      color[0] < 0 || color[0] > 255 ||\r\n      color[1] < 0 || color[1] > 255 ||\r\n      color[2] < 0 || color[2] > 255\r\n    ) {\r\n      throw new Error(`incorrect value of the color - [${color[0]}, ${color[1]}, ${color[2]}]`);\r\n    }\r\n  }\r\n}\r\n","import { Ray } from '../../models/ray.model';\r\nimport { Intersection } from '../../models/intersection.model';\r\nimport { Mesh } from '../mesh';\r\nimport { MeshIntersectionDetector } from '../mesh-intersection-detector';\r\nimport { SceneObjectProperties } from '../object-properties/scene-object-properties';\r\nimport { SceneObject } from './scene-object';\r\n\r\nexport abstract class MeshSceneObject extends SceneObject {\r\n  private meshes: Mesh[];\r\n\r\n  constructor(properties: SceneObjectProperties) {\r\n    super(properties);\r\n    this.meshes = this.getMeshes(properties);\r\n  }\r\n\r\n  public getIntersections(ray: Ray): Intersection[] {\r\n    return MeshIntersectionDetector.getIntersections(ray, this.meshes, this);\r\n  }\r\n\r\n  protected abstract getMeshes(properties: SceneObjectProperties): Mesh[];\r\n}\r\n","import { Point3d } from '../../geometry/point-3d';\r\nimport { Triangle3d } from '../../geometry/triangle-3d';\r\nimport { Rotator } from '../../renderer/rotator';\r\nimport { Mesh } from '../mesh';\r\nimport { ParallelepipedProperties } from '../object-properties/parallelepiped-properties';\r\nimport { MeshSceneObject } from './mesh-scene-object';\r\n\r\nexport class Parallelepiped extends MeshSceneObject {\r\n  constructor(properties: ParallelepipedProperties) {\r\n    super(properties);\r\n  }\r\n\r\n  protected getMeshes({ sizeX, sizeY, sizeZ }: ParallelepipedProperties): Mesh[] {\r\n    const halfSizeX = (sizeX ?? 1) / 2;\r\n    const halfSizeY = (sizeY ?? 1) / 2;\r\n    const halfSizeZ = (sizeZ ?? 1) / 2;\r\n\r\n    const rotator = new Rotator(this.rotation, this.position);\r\n    const vertices = rotator.rotatePoints([\r\n      new Point3d(this.position.x - halfSizeX, this.position.y - halfSizeY, this.position.z - halfSizeZ),\r\n      new Point3d(this.position.x + halfSizeX, this.position.y - halfSizeY, this.position.z - halfSizeZ),\r\n      new Point3d(this.position.x + halfSizeX, this.position.y + halfSizeY, this.position.z - halfSizeZ),\r\n      new Point3d(this.position.x - halfSizeX, this.position.y + halfSizeY, this.position.z - halfSizeZ),\r\n      new Point3d(this.position.x - halfSizeX, this.position.y - halfSizeY, this.position.z + halfSizeZ),\r\n      new Point3d(this.position.x + halfSizeX, this.position.y - halfSizeY, this.position.z + halfSizeZ),\r\n      new Point3d(this.position.x + halfSizeX, this.position.y + halfSizeY, this.position.z + halfSizeZ),\r\n      new Point3d(this.position.x - halfSizeX, this.position.y + halfSizeY, this.position.z + halfSizeZ),\r\n    ]);\r\n\r\n    return ([\r\n      [vertices[3], vertices[4], vertices[7]],\r\n      [vertices[0], vertices[3], vertices[4]],\r\n      [vertices[0], vertices[2], vertices[3]],\r\n      [vertices[0], vertices[1], vertices[2]],\r\n      [vertices[1], vertices[4], vertices[5]],\r\n      [vertices[0], vertices[1], vertices[4]],\r\n      [vertices[4], vertices[6], vertices[7]],\r\n      [vertices[4], vertices[5], vertices[6]],\r\n      [vertices[3], vertices[6], vertices[7]],\r\n      [vertices[2], vertices[3], vertices[6]],\r\n      [vertices[2], vertices[5], vertices[6]],\r\n      [vertices[1], vertices[2], vertices[5]],\r\n    ] satisfies [Point3d, Point3d, Point3d][])\r\n      .map(\r\n        ([point1, point2, point3]) => new Mesh(new Triangle3d(point1, point2, point3), this.material)\r\n      );\r\n  }\r\n}\r\n","import { CubeProperties } from '../object-properties/cube-properties';\r\nimport { Parallelepiped } from './parallelepiped';\r\n\r\nexport class Cube extends Parallelepiped {\r\n  constructor(properties: CubeProperties) {\r\n    const { size, ...baseProperties } = properties;\r\n    const sizeDimensions = size ?? 1;\r\n    super({\r\n      ...baseProperties,\r\n      sizeX: sizeDimensions,\r\n      sizeY: sizeDimensions,\r\n      sizeZ: sizeDimensions,\r\n    });\r\n  }\r\n}\r\n","import { Point3d } from '../../geometry/point-3d';\r\nimport { Triangle3d } from '../../geometry/triangle-3d';\r\nimport { Rotator } from '../../renderer/rotator';\r\nimport { Mesh } from '../mesh';\r\nimport { PlaneProperties } from '../object-properties/plane-properties';\r\nimport { MeshSceneObject } from './mesh-scene-object';\r\n\r\nexport class Plane extends MeshSceneObject {\r\n  constructor(properties: PlaneProperties) {\r\n    super(properties);\r\n  }\r\n\r\n  protected getMeshes(properties: PlaneProperties): Mesh[] {\r\n    const sizeX = properties.sizeX;\r\n    const sizeY = properties.sizeY ?? properties.sizeX;\r\n    const halfSizeX = sizeX / 2;\r\n    const halfSizeY = sizeY / 2;\r\n\r\n    const rotator = new Rotator(this.rotation, this.position);\r\n    const vertices = rotator.rotatePoints([\r\n      new Point3d(this.position.x - halfSizeX, this.position.y - halfSizeY, this.position.z),\r\n      new Point3d(this.position.x + halfSizeX, this.position.y - halfSizeY, this.position.z),\r\n      new Point3d(this.position.x + halfSizeX, this.position.y + halfSizeY, this.position.z),\r\n      new Point3d(this.position.x - halfSizeX, this.position.y + halfSizeY, this.position.z),\r\n    ]);\r\n\r\n    return ([\r\n      [vertices[0], vertices[1], vertices[2]],\r\n      [vertices[0], vertices[2], vertices[3]],\r\n    ] satisfies [Point3d, Point3d, Point3d][])\r\n      .map(\r\n        ([point1, point2, point3]) => new Mesh(new Triangle3d(point1, point2, point3), this.material)\r\n      );\r\n  }\r\n}\r\n","export function genArray<T>(count: number, mapper: (index: number) => T): T[] {\r\n  return Array(count).fill(null).map((_, i) => mapper(i));\r\n}\r\n","import { Point3d } from '../../geometry/point-3d';\r\nimport { PointSpherical } from '../../geometry/point-spherical';\r\nimport { Triangle3d } from '../../geometry/triangle-3d';\r\nimport { Rotator } from '../../renderer/rotator';\r\nimport { genArray } from '../../utils/array/gen-array';\r\nimport { Mesh } from '../mesh';\r\nimport { PrismProperties } from '../object-properties/prism-properties';\r\nimport { MeshSceneObject } from './mesh-scene-object';\r\n\r\nexport class Prism extends MeshSceneObject {\r\n  constructor(properties: PrismProperties) {\r\n    super(properties);\r\n  }\r\n\r\n  protected getMeshes(properties: PrismProperties): Mesh[] {\r\n    const angles = properties.angles ?? 3;\r\n    const radius = properties.radius ?? 1;\r\n    const hight = properties.hight ?? 1;\r\n\r\n    if (angles < 3) {\r\n      throw new Error(`amount of angles is less than 3 (${angles})`);\r\n    }\r\n\r\n    const rotator = new Rotator(this.rotation, this.position);\r\n    const halfHight = hight / 2;\r\n\r\n    const bottomBaseCenter = this.position.subtract(new Point3d(0, 0, halfHight));\r\n    const bottomBaseCenterRotated = rotator.rotatePoint(bottomBaseCenter);\r\n    const bottomBaseVertices = this.getBaseVartices(bottomBaseCenter, angles, radius);\r\n    const bottomBaseVerticesRotated = rotator.rotatePoints(bottomBaseVertices);\r\n\r\n    const upperBaseCenter = this.position.add(new Point3d(0, 0, halfHight));\r\n    const upperBaseCenterRotated = rotator.rotatePoint(upperBaseCenter);\r\n    const upperBaseVertices = this.getBaseVartices(upperBaseCenter, angles, radius);\r\n    const upperBaseVerticesRotated = rotator.rotatePoints(upperBaseVertices);\r\n\r\n    const facesTriangles = genArray<[Triangle3d, Triangle3d]>(angles, (i) => {\r\n      const nextIndex = (i + 1) % angles;\r\n      return [\r\n        new Triangle3d(\r\n          bottomBaseVerticesRotated[i],\r\n          bottomBaseVerticesRotated[nextIndex],\r\n          upperBaseVerticesRotated[i],\r\n        ),\r\n        new Triangle3d(\r\n          bottomBaseVerticesRotated[nextIndex],\r\n          upperBaseVerticesRotated[nextIndex],\r\n          upperBaseVerticesRotated[i],\r\n        ),\r\n      ];\r\n    }).flat();\r\n\r\n    return [\r\n      ...this.getBaseTriangles(bottomBaseCenterRotated, bottomBaseVerticesRotated),\r\n      ...this.getBaseTriangles(upperBaseCenterRotated, upperBaseVerticesRotated),\r\n      ...facesTriangles,\r\n    ].map((triangle) => new Mesh(triangle, this.material));\r\n  }\r\n\r\n  private getBaseVartices(origin: Point3d, count: number, radius: number): Point3d[] {\r\n    const angle = 360 / count;\r\n    return genArray(count, (i) => new PointSpherical(radius, 0, angle * i).toCartesian(origin));\r\n  }\r\n\r\n  private getBaseTriangles(center: Point3d, points: Point3d[]): Triangle3d[] {\r\n    return genArray(points.length, (i) => {\r\n      return new Triangle3d(\r\n        center,\r\n        points[i],\r\n        points[(i + 1) % points.length],\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { Point3d } from '../../geometry/point-3d';\r\nimport { Intersection } from '../../models/intersection.model';\r\nimport { getLength } from '../../utils/get-length';\r\nimport { solveQuadraticEquation } from '../../utils/solve-quadratic-equation';\r\nimport { Ray } from '../../models/ray.model';\r\nimport { SphereProperties } from '../object-properties/sphere-properties';\r\nimport { SceneObject } from './scene-object';\r\n\r\nexport class Sphere extends SceneObject {\r\n  public readonly radius: number;\r\n\r\n  constructor(properties: SphereProperties) {\r\n    super(properties);\r\n    this.radius = properties.radius ?? 1;\r\n  }\r\n\r\n  public getIntersections(ray: Ray): Intersection[] {\r\n    const p1 = ray.line.point1;\r\n    const p2 = ray.line.point2;\r\n    const v = p2.subtract(p1);\r\n    const o = this.position;\r\n    const r = this.radius;\r\n    const x0 = o.x;\r\n    const y0 = o.y;\r\n    const z0 = o.z;\r\n    const x1 = p1.x;\r\n    const y1 = p1.y;\r\n    const z1 = p1.z;\r\n\r\n    const a = v.x * v.x + v.y * v.y + v.z * v.z;\r\n    const b = 2 * (x1 * v.x - x0 * v.x + y1 * v.y - y0 * v.y + z1 * v.z - z0 * v.z);\r\n    const c = x0 * x0 + x1 * x1 + y0 * y0 + y1 * y1 + z0 * z0 + z1 * z1 - r * r - 2 * (x0 * x1 + y0 * y1 + z0 * z1);\r\n\r\n    const solutions = solveQuadraticEquation(a, b, c);\r\n\r\n    return solutions.map((solution) => {\r\n      const point = new Point3d(x1 + v.x * solution, y1 + v.y * solution, z1 + v.z * solution);\r\n      return {\r\n        material: this.material,\r\n        point,\r\n        distance: getLength(ray.line.point1, point),\r\n        object: this,\r\n      };\r\n    });\r\n  }\r\n}\r\n","export function solveQuadraticEquation(\r\n  a: number,\r\n  b: number,\r\n  c: number,\r\n): number[] {\r\n  const d = b * b - 4 * a * c;\r\n  if (d < 0) {\r\n    return [];\r\n  }\r\n\r\n  const denominator = 2 * a;\r\n  if (d === 0) {\r\n    return [-b / denominator];\r\n  }\r\n\r\n  const sqrtd = Math.sqrt(d);\r\n  return [(-b + sqrtd) / denominator, (-b - sqrtd) / denominator];\r\n}\r\n","import { LinearEquation } from '../models/linear-equation.model';\r\nimport { Line3d } from '../models/line-3d.models';\r\nimport { Point3d } from '../geometry/point-3d';\r\nimport { Triangle3d } from '../geometry/triangle-3d';\r\n\r\nexport function getEquations(line: Line3d): LinearEquation[] {\r\n  const triangle1 = new Triangle3d(line.point1, line.point2, line.point1.add(new Point3d(3.124543, 6.83475, 0)));\r\n  const triangle2 = new Triangle3d(line.point1, line.point2, line.point1.add(new Point3d(3.124543, 0, 6.83475)));\r\n  return [\r\n    triangle1.getPlaneEquation(),\r\n    triangle2.getPlaneEquation()\r\n  ];\r\n}\r\n","import { Point3d } from '../geometry/point-3d';\r\nimport { Line3d } from '../models/line-3d.models';\r\nimport { Ray } from '../models/ray.model';\r\nimport { getEquations } from './get-equations';\r\nimport { getLength } from './get-length';\r\n\r\nexport function generateRay(point1: Point3d, point2: Point3d): Ray {\r\n  const line: Line3d = { point1, point2 };\r\n  return {\r\n    line,\r\n    length: getLength(line.point1, line.point2),\r\n    equations: getEquations(line),\r\n  };\r\n}\r\n","import { Point3d } from '../geometry/point-3d';\r\nimport { Resolution } from '../models/resolution.model';\r\nimport { Rotator } from '../renderer/rotator';\r\nimport { Ray } from '../models/ray.model';\r\nimport { Rotation } from '../models/rotation.model';\r\nimport { generateRay } from '../utils/generate-ray';\r\n\r\ninterface CameraOptions {\r\n  position: Point3d;\r\n  rotation?: Rotation;\r\n  fov?: number;\r\n\r\n  /** Must be bigger then 0 */\r\n  distance?: number;\r\n  fogStart?: number;\r\n  resolution: Resolution;\r\n}\r\n\r\nexport class Camera {\r\n  public position: Point3d;\r\n  public rotation: Rotation;\r\n  public fov: number;\r\n  public distance: number;\r\n  public fogStart: number;\r\n  public resolution: Resolution;\r\n\r\n  /** Global width of canvas on scene */\r\n  private canvasWidth = 0;\r\n\r\n  /** Global height of canvas on scene */\r\n  private canvasHeight = 0;\r\n\r\n  /** Global size of 1 pixel on scene */\r\n  private canvasPixelSize = 0;\r\n\r\n  /** Global X when camera has no rotation */\r\n  private canvasCoordX = 0;\r\n\r\n  private rotator: Rotator;\r\n\r\n  constructor({ position, rotation, fov, distance, fogStart, resolution }: CameraOptions) {\r\n    this.position = position;\r\n    this.rotation = rotation ?? { x: 0, y: 0, z: 0 };\r\n    this.fov = fov ?? 90;\r\n    this.distance = distance ?? 100;\r\n    this.fogStart = fogStart ?? 0;\r\n    this.resolution = resolution;\r\n    this.rotator = new Rotator(this.rotation);\r\n\r\n    this.validateDistance();\r\n\r\n    this.updateCanvasConfig(position);\r\n  }\r\n\r\n  public generateRay(x: number, y: number): Ray {\r\n    const coordY = (this.canvasPixelSize * x + this.canvasPixelSize / 2) - this.canvasWidth / 2;\r\n    const coordZ =\r\n      (this.canvasPixelSize * (this.resolution.height - y - 1) + this.canvasPixelSize / 2) - this.canvasHeight / 2;\r\n    const rotatedPoint = this.rotator.rotatePoint(new Point3d(this.canvasCoordX, coordY, coordZ));\r\n\r\n    return generateRay(this.position, rotatedPoint);\r\n  }\r\n\r\n  public updateCanvasConfig(position?: Point3d): void {\r\n    this.canvasWidth = 2 * this.distance * Math.tan(this.fov / 2 * Math.PI / 180);\r\n    this.canvasPixelSize = this.canvasWidth / this.resolution.width;\r\n    this.canvasHeight = this.canvasPixelSize * this.resolution.height;\r\n    this.canvasCoordX = this.position.x + this.distance;\r\n    this.rotator = new Rotator(this.rotation, position ?? this.position);\r\n  }\r\n\r\n  private validateDistance(): void {\r\n    if (this.distance <= 0) {\r\n      throw new Error(`camera distance less or equals 0 (${this.distance})`);\r\n    }\r\n  }\r\n}\r\n","import { Point3d } from '../../geometry/point-3d';\r\nimport { Cube } from '../../scene/objects/cube';\r\nimport { Parallelepiped } from '../../scene/objects/parallelepiped';\r\nimport { Plane } from '../../scene/objects/plane';\r\nimport { Prism } from '../../scene/objects/prism';\r\nimport { Sphere } from '../../scene/objects/sphere';\r\nimport { Scene } from '../../scene/scene';\r\nimport { defaultCamera } from '../default-camera';\r\n\r\nexport const defaultScene = new Scene({\r\n  camera: defaultCamera,\r\n  objects: [\r\n    new Cube({\r\n      position: new Point3d(0, -1, 2.5),\r\n      rotation: { x: 0, y: 0, z: -10 },\r\n      material: {\r\n        color: [225, 255, 225],\r\n      },\r\n      size: 5,\r\n    }),\r\n    new Parallelepiped({\r\n      name: 'blue parallelepiped',\r\n      position: new Point3d(0, -5.4, 1.5),\r\n      rotation: { x: 21, y: -12, z: 15 },\r\n      material: {\r\n        color: [200, 200, 255],\r\n        opacity: 0.7,\r\n      },\r\n      sizeX: 4,\r\n      sizeY: 1,\r\n      sizeZ: 2,\r\n    }),\r\n    new Sphere({\r\n      position: new Point3d(-2, 5, 1.5),\r\n      material: {\r\n        color: [255, 255, 255],\r\n      },\r\n      radius: 2,\r\n    }),\r\n    new Prism({\r\n      name: 'red prism',\r\n      rotation: { x: 90, y: 45, z: -40 },\r\n      position: new Point3d(-3.5, 0, 1.5),\r\n      material: {\r\n        color: [255, 200, 200],\r\n        opacity: 0.5,\r\n      },\r\n      angles: 3,\r\n      hight: 2,\r\n      radius: 1,\r\n    }),\r\n    new Plane({\r\n      position: new Point3d(0, 0, 0),\r\n      material: {\r\n        color: [255, 255, 200],\r\n      },\r\n      sizeX: 100,\r\n    }),\r\n  ],\r\n});\r\n","import { Color } from '../models/color.model';\r\nimport { Camera } from './camera';\r\nimport { SceneObject } from './objects/scene-object';\r\n\r\ninterface SceneProperties {\r\n  objects?: SceneObject[];\r\n  backgroundColor?: Color;\r\n  camera: Camera;\r\n}\r\n\r\nexport class Scene {\r\n  public readonly backgroundColor: Color;\r\n  public readonly camera: Camera;\r\n\r\n  private objects: SceneObject[];\r\n\r\n  constructor(properties: SceneProperties) {\r\n    this.backgroundColor = properties?.backgroundColor ?? [0, 0, 0];\r\n    this.objects = properties?.objects ?? [];\r\n    this.camera = properties.camera;\r\n  }\r\n\r\n  // TODO: SceneObject | MeshSceneObject\r\n  public addObjects(...objects: SceneObject[]): void {\r\n    this.objects.push(...objects);\r\n  }\r\n\r\n  public getObjects(): SceneObject[] {\r\n    return this.objects;\r\n  }\r\n}\r\n","import { Point3d } from '../geometry/point-3d';\r\nimport { Camera } from '../scene/camera';\r\n\r\nexport const defaultCamera = new Camera({\r\n  position: new Point3d(-7, -5, 6),\r\n  rotation: { x: 0, y: 11, z: 17 },\r\n  distance: 17,\r\n  resolution: {\r\n    width: 384,\r\n    height: 216,\r\n  },\r\n  fov: 90,\r\n});\r\n","export class RendererError extends Error {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'RendererError';\r\n  }\r\n}\r\n","export function getElement<T extends HTMLElement>(id: string): T {\r\n  const canvasEl = document.querySelector<T>(`#${id}`);\r\n  if (canvasEl) {\r\n    return canvasEl;\r\n  }\r\n  throw new Error(`element '${id}' not found`);\r\n}\r\n","import { RendererError } from '../errors/renderer-error';\r\nimport { Point } from '../models/point.model';\r\nimport { Resolution } from '../models/resolution.model';\r\nimport { getElement } from '../utils/get-element';\r\nimport { Color } from '../models/color.model';\r\n\r\nexport class Screen {\r\n  public readonly resolution: Resolution;\r\n  private readonly background: string;\r\n  private readonly canvasEl: HTMLCanvasElement;\r\n  private readonly context: CanvasRenderingContext2D;\r\n\r\n  constructor(id: string, resolution: Resolution, background: string = 'black') {\r\n    this.resolution = resolution;\r\n    this.background = background;\r\n    this.canvasEl = getElement(id);\r\n\r\n    this.canvasEl.width = resolution.width;\r\n    this.canvasEl.height = resolution.height;\r\n    this.context = this.getContext(this.canvasEl);\r\n  }\r\n\r\n  public clear(): void {\r\n    this.context.fillStyle = this.background;\r\n    this.context.clearRect(0, 0, this.resolution.width, this.resolution.height);\r\n  }\r\n\r\n  public drawLine(point1: Point, point2: Point, color: Color, width = 1): void {\r\n    this.context.strokeStyle = this.colorToString(color);\r\n    this.context.lineWidth = width;\r\n    this.context.lineCap = 'round';\r\n    this.context.beginPath();\r\n    this.context.moveTo(point1.x, point1.y);\r\n    this.context.lineTo(point2.x, point2.y);\r\n    this.context.stroke();\r\n  }\r\n\r\n  public drawPixel(x: number, y: number, color: Color): void {\r\n    this.context.fillStyle = this.colorToString(color);\r\n    this.context.fillRect(x, y, 1, 1);\r\n  }\r\n\r\n  private getContext(element: HTMLCanvasElement): CanvasRenderingContext2D {\r\n    const context = element.getContext('2d');\r\n    if (context) {\r\n      return context;\r\n    }\r\n    throw new RendererError('No contaxt for canvas element');\r\n  }\r\n\r\n  private colorToString(color: Color): string {\r\n    return `rgb(${color[0]}, ${color[1]}, ${color[2]})`;\r\n  }\r\n}\r\n","import { Color } from '../models/color.model';\r\n\r\nexport function mixColors(color1: Color, color2: Color, ratio = 0.5): Color {\r\n  const ratioCurrent = 1 - ratio;\r\n  return [\r\n    color1[0] * ratioCurrent + color2[0] * ratio,\r\n    color1[1] * ratioCurrent + color2[1] * ratio,\r\n    color1[2] * ratioCurrent + color2[2] * ratio,\r\n  ];\r\n}\r\n","import { RenderMode } from '../models/render-mode.model';\r\n\r\nexport class RendererProcessingInfo {\r\n  public time = 0;\r\n  public interruptConfirmed = false;\r\n  public primaryRays = 0;\r\n  public totalRays = 0;\r\n  public transparentIntersections = 0;\r\n  public mode: RenderMode = 'main';\r\n}\r\n","import { Resolution } from '../models/resolution.model';\r\nimport { Screen } from './screen';\r\nimport { Intersection } from '../models/intersection.model';\r\nimport { Scene } from '../scene/scene';\r\nimport { Camera } from '../scene/camera';\r\nimport { Ray } from '../models/ray.model';\r\nimport { Color } from '../models/color.model';\r\nimport { mixColors } from '../utils/mix-colors';\r\nimport { generateRay } from '../utils/generate-ray';\r\nimport { getLength } from '../utils/get-length';\r\nimport { SceneObject } from '../scene/objects/scene-object';\r\nimport { removeElementFrom } from '../utils/array/remove-element-from';\r\nimport { RendererProcessingInfo } from './renderer-processing-info';\r\nimport { RenderMode } from '../models/render-mode.model';\r\n\r\ninterface RenderSummary {\r\n  time: number;\r\n  primaryRays: number;\r\n  totalRays: number;\r\n  transparentIntersections: number;\r\n  progress: number;\r\n  status: 'success' | 'interrupted';\r\n}\r\n\r\nexport class Renderer {\r\n  private processingInfo = new RendererProcessingInfo();\r\n\r\n  constructor(\r\n    private readonly scene: Scene,\r\n    private readonly canvasId: string,\r\n  ) {}\r\n\r\n  public get camera(): Camera {\r\n    return this.scene.camera;\r\n  }\r\n\r\n  private get resolution(): Resolution {\r\n    return this.camera.resolution;\r\n  }\r\n\r\n  /**\r\n   * @returns time of rendering in miliseconds\r\n   */\r\n  public render(mode: RenderMode = 'main'): Promise<RenderSummary> {\r\n    const screen = new Screen(this.canvasId, this.resolution);\r\n    this.camera.updateCanvasConfig();\r\n\r\n    this.processingInfo = new RendererProcessingInfo();\r\n    this.processingInfo.mode = mode;\r\n    return new Promise((resolve, reject) => {\r\n      this.runTask(resolve, reject, this.resolution, screen, 0);\r\n    });\r\n  }\r\n\r\n  public interrupt(): void {\r\n    this.processingInfo.interruptConfirmed = true;\r\n  }\r\n\r\n  private runTask(\r\n    resolve: (value: RenderSummary | PromiseLike<RenderSummary>) => void,\r\n    reject: (reason?: unknown) => void,\r\n    resolution: Resolution,\r\n    screen: Screen,\r\n    yStart: number,\r\n  ): void {\r\n    setTimeout(() => {\r\n      const timestamp = performance.now();\r\n\r\n      for (let x = 0; x < resolution.width; x++) {\r\n        const primaryRay = this.camera.generateRay(x, yStart);\r\n        this.processingInfo.primaryRays++;\r\n        const color = this.castRay(primaryRay, this.scene.getObjects());\r\n        screen.drawPixel(x, yStart, color);\r\n      }\r\n\r\n      const newYStart = yStart + 1;\r\n\r\n      if (!this.processingInfo.interruptConfirmed && newYStart !== resolution.height) {\r\n        this.runTask(resolve, reject, resolution, screen, newYStart);\r\n        this.processingInfo.time += performance.now() - timestamp;\r\n      } else {\r\n        this.processingInfo.time += performance.now() - timestamp;\r\n        resolve({\r\n          time: this.processingInfo.time,\r\n          primaryRays: this.processingInfo.primaryRays,\r\n          totalRays: this.processingInfo.totalRays,\r\n          transparentIntersections: this.processingInfo.transparentIntersections,\r\n          progress: newYStart / this.resolution.height,\r\n          status: newYStart === this.resolution.height ? 'success' : 'interrupted',\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private castRay(ray: Ray, objects: SceneObject[]): Color {\r\n    this.processingInfo.totalRays++;\r\n    let closestIntersection: Intersection | undefined;\r\n\r\n    objects.forEach(obj => {\r\n      const intersections = obj.getIntersections(ray);\r\n      intersections.forEach(intersection => {\r\n        if (!closestIntersection || intersection.distance < closestIntersection.distance) {\r\n          closestIntersection = intersection;\r\n        }\r\n      });\r\n    });\r\n\r\n    if (this.processingInfo.mode === 'depthMap') {\r\n      return this.getDephColor(closestIntersection);\r\n    }\r\n\r\n    return closestIntersection\r\n      ? this.handleIntersection(closestIntersection, ray, objects)\r\n      : this.scene.backgroundColor;\r\n  }\r\n\r\n  private handleIntersection(\r\n    intersection: Intersection,\r\n    ray: Ray,\r\n    objects: SceneObject[],\r\n  ): Color {\r\n    const distanceToCamera = getLength(this.camera.position, intersection.point);\r\n\r\n    const currentIntersectionColor = mixColors(\r\n      intersection.material.color,\r\n      this.scene.backgroundColor,\r\n      this.getMixFogCoefficient(distanceToCamera)\r\n    );\r\n\r\n    const opacity = intersection.material.opacity;\r\n    if (typeof opacity !== 'undefined' && opacity !== 1) {\r\n      this.processingInfo.transparentIntersections++;\r\n      const newRay = generateRay(\r\n        intersection.point,\r\n        ray.line.point2,\r\n      );\r\n      return mixColors(\r\n        this.castRay(newRay, removeElementFrom(objects, intersection.object)),\r\n        currentIntersectionColor,\r\n        opacity\r\n      );\r\n    }\r\n\r\n    return currentIntersectionColor;\r\n  }\r\n\r\n  private getMixFogCoefficient(distance: number): number {\r\n    if (distance < this.camera.fogStart) {\r\n      return 0;\r\n    }\r\n\r\n    return (distance - this.camera.fogStart) / (this.camera.distance - this.camera.fogStart);\r\n  }\r\n\r\n  private getDephColor(intersection?: Intersection): Color {\r\n    const colorFrom: Color = [255, 255, 255];\r\n    const colorTo: Color = [0, 0, 0];\r\n\r\n    if (intersection) {\r\n      const distanceToCamera = getLength(this.camera.position, intersection.point);\r\n      return distanceToCamera > this.camera.distance\r\n        ? [255, 0, 0]\r\n        : mixColors(colorFrom, colorTo, distanceToCamera / this.camera.distance);\r\n    } else {\r\n      return colorTo;\r\n    }\r\n  }\r\n}\r\n","export function removeElementFrom<T>(array: T[], element: T): T[] {\r\n  const index = array.indexOf(element);\r\n  return index === -1\r\n    ? array\r\n    : [...array.slice(0, index), ...array.slice(index + 1)];\r\n}\r\n","export class Counters {\r\n  private static readonly formatter = new Intl.NumberFormat('en-US', { compactDisplay: 'short' });\r\n  private static counters: Record<string, number> = {};\r\n\r\n  public static add(name: string): void {\r\n    Counters.counters[name] = Counters.counters[name] ? Counters.counters[name] + 1 : 1;\r\n  }\r\n\r\n  public static log(): void {\r\n    const formattedCounters = Object\r\n      .entries(Counters.counters)\r\n      .reduce<Record<string, string>>((acc, [name, count]) => {\r\n        return {\r\n          ...acc,\r\n          [name]: Counters.formatter.format(count),\r\n        };\r\n      }, {});\r\n\r\n    // eslint-disable-next-line no-console\r\n    console.info(formattedCounters);\r\n  }\r\n\r\n  public static reset(): void {\r\n    Counters.counters = {};\r\n  }\r\n}\r\n","import { Point } from '../models/point.model';\r\nimport { Point3d } from '../geometry/point-3d';\r\nimport { Vector } from '../geometry/vector-3d';\r\nimport { Rotator } from './rotator';\r\nimport { Camera } from '../scene/camera';\r\nimport { Rotation } from '../models/rotation.model';\r\nimport { Color } from '../models/color.model';\r\nimport { Screen } from './screen';\r\n\r\nexport class AxesRenderer {\r\n  private screen: Screen;\r\n\r\n  constructor(canvasId: string) {\r\n    this.screen = new Screen(canvasId, { width: 320, height: 240 }, 'transparent');\r\n  }\r\n\r\n  public render(camera: Camera): void {\r\n    const cameraPosition = new Point3d(-2, 0, 0);\r\n    const vfov = this.getVerticalFov(camera);\r\n\r\n    const camDirPoint = new Point3d(0, 0, 0).subtract(cameraPosition);\r\n    const inverseRotation: Rotation = {\r\n      x: -camera.rotation.x,\r\n      y: -camera.rotation.y,\r\n      z: -camera.rotation.z,\r\n    };\r\n\r\n    const rotator = new Rotator(inverseRotation);\r\n    const xAxisEnd = rotator.rotatePoint(new Point3d(1, 0, 0)).subtract(cameraPosition);\r\n    const yAxisEnd = rotator.rotatePoint(new Point3d(0, 1, 0)).subtract(cameraPosition);\r\n    const zAsisEnd = rotator.rotatePoint(new Point3d(0, 0, 1)).subtract(cameraPosition);\r\n\r\n    const xScreenEnd = this.getAxisEndScreenPoint(camDirPoint, xAxisEnd, camera.fov, vfov);\r\n    const yScreenEnd = this.getAxisEndScreenPoint(camDirPoint, yAxisEnd, camera.fov, vfov);\r\n    const zScreenEnd = this.getAxisEndScreenPoint(camDirPoint, zAsisEnd, camera.fov, vfov);\r\n\r\n    const centralPoint: Point = { x: this.screen.resolution.width / 2, y: this.screen.resolution.height / 2 };\r\n\r\n    const shadowColor: Color = [0, 0, 0];\r\n    this.screen.clear();\r\n\r\n    this.screen.drawLine(centralPoint, xScreenEnd, shadowColor, 6);\r\n    this.screen.drawLine(centralPoint, yScreenEnd, shadowColor, 6);\r\n    this.screen.drawLine(centralPoint, zScreenEnd, shadowColor, 6);\r\n\r\n    this.screen.drawLine(centralPoint, xScreenEnd, [255, 0, 0], 4);\r\n    this.screen.drawLine(centralPoint, yScreenEnd, [0, 255, 0], 4);\r\n    this.screen.drawLine(centralPoint, zScreenEnd, [0, 0, 255], 4);\r\n  }\r\n\r\n  private getAxisEndScreenPoint(camDirPoint: Point3d, dirPoint: Point3d, hfov: number, vfov: number): Point {\r\n\r\n    let hAngle = new Vector(camDirPoint).getAngle(new Vector(new Point3d(dirPoint.x, dirPoint.y, 0)));\r\n    let vAngle = new Vector(camDirPoint).getAngle(new Vector(new Point3d(dirPoint.x, 0, dirPoint.z)));\r\n\r\n    if (dirPoint.y < 0) {\r\n      hAngle = -hAngle;\r\n    }\r\n    if (dirPoint.z < 0) {\r\n      vAngle = -vAngle;\r\n    }\r\n\r\n    const x = this.screen.resolution.width * (hAngle + hfov / 2) / hfov;\r\n    const y = this.screen.resolution.height - (this.screen.resolution.height * (vAngle + vfov / 2) / vfov);\r\n\r\n    // console.log(\r\n    //   'camDirPoint', camDirPoint, 'dirPoint', dirPoint,\r\n    //   `\\nhfov`, hfov, 'vfov', vfov,\r\n    //   `\\nhAngle`, hAngle, 'vAngle', vAngle,\r\n    //   `\\nx`, x, 'y', y\r\n    // );\r\n\r\n    return { x, y };\r\n  }\r\n\r\n  private getVerticalFov(camera: Camera): number {\r\n    const aspectRatio = camera.resolution.height / camera.resolution.width;\r\n    const fovRad = camera.fov * Math.PI / 180;\r\n    const vFovRad = 2 * Math.atan(Math.tan(fovRad / 2) * aspectRatio);\r\n    return vFovRad * 180 / Math.PI;\r\n  }\r\n}\r\n","import { defaultScene } from './constants/scene-presets/default-scene';\r\nimport { Renderer } from './renderer/renderer';\r\nimport { Ui } from './renderer/ui';\r\n\r\nnew Ui(new Renderer(defaultScene, 'canvas-main')).init();\r\n","import { Counters } from '../debug/counters';\r\nimport { Point3d } from '../geometry/point-3d';\r\nimport { getElement } from '../utils/get-element';\r\nimport { AxesRenderer } from './axes-renderer';\r\nimport { Renderer } from './renderer';\r\n\r\nexport class Ui {\r\n  private readonly aspectRatio: number;\r\n  private readonly axesRenderer: AxesRenderer;\r\n\r\n  private readonly form = {\r\n    position: {\r\n      x: getElement<HTMLInputElement>('input-position-x'),\r\n      y: getElement<HTMLInputElement>('input-position-y'),\r\n      z: getElement<HTMLInputElement>('input-position-z'),\r\n    },\r\n    rotation: {\r\n      x: getElement<HTMLInputElement>('input-rotation-x'),\r\n      y: getElement<HTMLInputElement>('input-rotation-y'),\r\n      z: getElement<HTMLInputElement>('input-rotation-z'),\r\n    },\r\n    fov: getElement<HTMLInputElement>('input-fov'),\r\n    distance: getElement<HTMLInputElement>('input-distance'),\r\n    resolution: {\r\n      width: getElement<HTMLInputElement>('input-width'),\r\n      height: getElement<HTMLInputElement>('input-height'),\r\n    },\r\n    renderButton: getElement<HTMLButtonElement>('button-render'),\r\n\r\n    time: getElement<HTMLDivElement>('div-time'),\r\n    interruptRenderButton: getElement<HTMLButtonElement>('button-interrupt'),\r\n  };\r\n\r\n  private disabledElementsDuringRender: (HTMLInputElement | HTMLButtonElement)[];\r\n\r\n  constructor(private readonly renderer: Renderer) {\r\n    this.disabledElementsDuringRender = [\r\n      this.form.position.x,\r\n      this.form.position.y,\r\n      this.form.position.z,\r\n      this.form.rotation.x,\r\n      this.form.rotation.y,\r\n      this.form.rotation.z,\r\n      this.form.fov,\r\n      this.form.distance,\r\n      this.form.resolution.width,\r\n      this.form.resolution.height,\r\n      this.form.renderButton,\r\n    ];\r\n\r\n    this.aspectRatio = this.renderer.camera.resolution.width / this.renderer.camera.resolution.height;\r\n    this.axesRenderer = new AxesRenderer('canvas-axes');\r\n  }\r\n\r\n  public init(): void {\r\n    const camera = this.renderer.camera;\r\n\r\n    this.form.position.x.value = String(camera.position.x);\r\n    this.form.position.y.value = String(camera.position.y);\r\n    this.form.position.z.value = String(camera.position.z);\r\n\r\n    this.form.rotation.x.value = String(camera.rotation.x);\r\n    this.form.rotation.y.value = String(camera.rotation.y);\r\n    this.form.rotation.z.value = String(camera.rotation.z);\r\n\r\n    this.form.fov.value = String(camera.fov);\r\n    this.form.distance.value = String(camera.distance);\r\n    this.form.resolution.width.value = String(camera.resolution.width);\r\n    this.form.resolution.height.value = String(camera.resolution.height);\r\n\r\n    this.form.renderButton.addEventListener('click', () => {\r\n      camera.resolution = {\r\n        width: Number(this.form.resolution.width.value),\r\n        height: Number(this.form.resolution.height.value),\r\n      };\r\n      camera.position = new Point3d(\r\n        Number(this.form.position.x.value),\r\n        Number(this.form.position.y.value),\r\n        Number(this.form.position.z.value)\r\n      );\r\n      camera.rotation = {\r\n        x: Number(this.form.rotation.x.value),\r\n        y: Number(this.form.rotation.y.value),\r\n        z: Number(this.form.rotation.z.value),\r\n      };\r\n      camera.fov = Number(this.form.fov.value);\r\n      camera.distance = Number(this.form.distance.value);\r\n      this.handleRender();\r\n    });\r\n\r\n    this.form.interruptRenderButton.addEventListener('click', () => {\r\n      this.renderer.interrupt();\r\n    });\r\n\r\n    this.form.resolution.width.addEventListener('change', (event: Event) => {\r\n      if (event.target instanceof HTMLInputElement) {\r\n        const newHight = Math.round(Number(event.target.value) / this.aspectRatio);\r\n        this.form.resolution.height.value = String(newHight);\r\n      }\r\n    });\r\n\r\n    this.form.resolution.height.addEventListener('change', (event: Event) => {\r\n      if (event.target instanceof HTMLInputElement) {\r\n        const newWidth = Math.round(Number(event.target.value) * this.aspectRatio);\r\n        this.form.resolution.width.value = String(newWidth);\r\n      }\r\n    });\r\n\r\n    this.handleRender();\r\n  }\r\n\r\n  private handleRender(): void {\r\n    const interruptRenderButton = this.form.interruptRenderButton;\r\n\r\n    this.setDisabledFor(this.disabledElementsDuringRender, true);\r\n    interruptRenderButton.disabled = false;\r\n    this.form.time.innerText = '-';\r\n\r\n    this.axesRenderer.render(this.renderer.camera);\r\n    this.renderer.render().then((summary) => {\r\n      // eslint-disable-next-line no-console\r\n      console.info(summary);\r\n      Counters.log();\r\n\r\n      this.form.time.innerText = (summary.time / 1000).toFixed(3) + ' s';\r\n      this.setDisabledFor(this.disabledElementsDuringRender, false);\r\n      interruptRenderButton.disabled = true;\r\n    });\r\n  }\r\n\r\n  private setDisabledFor(elements: typeof this.disabledElementsDuringRender, disabled: boolean): void {\r\n    elements.forEach((element) => {\r\n      element.disabled = disabled;\r\n    });\r\n  }\r\n}\r\n"],"names":["distance","angleVertical","angleHorizontal","toCartesian","origin","angleVerticalRad","this","Math","PI","angleHorizontalRad","x","sin","cos","y","z","point","Point3d","add","subtract","toSpherical","r","sqrt","PointSpherical","acos","atan","getAngle","vector","x1","y1","z1","x2","y2","z2","expr","point1","point2","point3","getPlaneEquation","x0","y0","z0","dx1","dx2","dy1","dy2","dz1","dz2","coefficients","constant","pointInside","vector1","Vector","vector2","vector3","message","name","Error","MatrixError","areElementsEqual","list","length","values","size","calculateSize","columns","rows","matrix","MatrixOperationError","Matrix","map","row","rowIndex","val","columnIndex","multiply","multiplier","multiplyByMatrix","multiplyByNumber","throwSizeError","lengthsOfRows","newValues","colIndex","sum","columnCalcIndex","push","rotation","pivot","rotatePoint","xRad","yRad","zRad","point0","rotationMatrixX","rotationMatrixY","rotationMatrixZ","coordsRotatedX","coordsRotatedXY","coordsRotatedXYZ","rotatePoints","points","triangle","material","equation","getDeterminant","determinant","matrixValues","slice","splice","newMultiplier","SquareMatrix","equations","numbersOfCoefficients","eq","EquationError","getSolution","mainDeterminant","solution","valuesForMatrix","i","rowValues","getSolutionByGauss","v","a","b","c","d","e","f","j","k","m","p","ea","ka","fbea","SystemOfLinearEquations","getLength","getIntersections","ray","meshes","object","intersections","forEach","mesh","equationSystem","SystemOfLinearEquations3eq3Var","MeshIntersectionDetector","getIntersectionPoint","line","properties","SceneObject","getDefaultName","constructor","type","position","defaultMaterial","validateOpacity","validateColor","id","constructorCounters","opacity","color","getMeshes","sizeX","sizeY","sizeZ","halfSizeX","halfSizeY","halfSizeZ","vertices","Rotator","Mesh","Triangle3d","MeshSceneObject","baseProperties","sizeDimensions","Parallelepiped","genArray","count","mapper","Array","fill","_","angles","radius","hight","rotator","halfHight","bottomBaseCenter","bottomBaseCenterRotated","bottomBaseVertices","getBaseVartices","bottomBaseVerticesRotated","upperBaseCenter","upperBaseCenterRotated","upperBaseVertices","upperBaseVerticesRotated","facesTriangles","nextIndex","flat","getBaseTriangles","angle","center","p1","o","solutions","denominator","sqrtd","solveQuadraticEquation","getEquations","triangle1","triangle2","generateRay","defaultScene","backgroundColor","objects","camera","addObjects","getObjects","fov","fogStart","resolution","canvasWidth","canvasHeight","canvasPixelSize","canvasCoordX","validateDistance","updateCanvasConfig","coordY","coordZ","height","rotatedPoint","tan","width","Cube","Sphere","Prism","Plane","getElement","canvasEl","document","querySelector","background","context","getContext","clear","fillStyle","clearRect","drawLine","strokeStyle","colorToString","lineWidth","lineCap","beginPath","moveTo","lineTo","stroke","drawPixel","fillRect","element","RendererError","mixColors","color1","color2","ratio","ratioCurrent","time","interruptConfirmed","primaryRays","totalRays","transparentIntersections","mode","scene","canvasId","processingInfo","RendererProcessingInfo","render","screen","Screen","Promise","resolve","reject","runTask","interrupt","yStart","setTimeout","timestamp","performance","now","primaryRay","castRay","newYStart","progress","status","closestIntersection","obj","intersection","getDephColor","handleIntersection","array","index","distanceToCamera","currentIntersectionColor","getMixFogCoefficient","newRay","indexOf","colorTo","Counters","counters","log","formattedCounters","Object","entries","reduce","acc","formatter","format","console","info","reset","Intl","NumberFormat","compactDisplay","cameraPosition","vfov","getVerticalFov","camDirPoint","inverseRotation","xAxisEnd","yAxisEnd","zAsisEnd","xScreenEnd","getAxisEndScreenPoint","yScreenEnd","zScreenEnd","centralPoint","shadowColor","dirPoint","hfov","hAngle","vAngle","aspectRatio","fovRad","renderer","form","renderButton","interruptRenderButton","disabledElementsDuringRender","axesRenderer","AxesRenderer","init","value","String","addEventListener","Number","handleRender","event","target","HTMLInputElement","newHight","round","newWidth","setDisabledFor","disabled","innerText","then","summary","toFixed","elements","Renderer"],"sourceRoot":""}